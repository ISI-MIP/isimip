# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-24 17:05
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import isi_mip.choiceorotherfield.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agriculture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgroEconomicModelling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Biomes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClimateDataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='ClimateVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('abbrevation', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CoastalInfrastructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Energy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='General',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('region', models.CharField(max_length=500)),
                ('version', models.CharField(blank=True, max_length=500, null=True)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('resolution', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('0.5째x0.5째', '0.5째x0.5째')], max_length=500, null=True)),
                ('temporal_resolution_climate', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('daily', 'daily'), ('monthly', 'monthly'), ('annual', 'annual')], max_length=500, null=True)),
                ('temporal_resolution_co2', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], max_length=500, null=True)),
                ('temporal_resolution_land', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], max_length=500, null=True)),
                ('temporal_resolution_soil', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], max_length=500, null=True)),
                ('soil_dataset', models.TextField(blank=True, help_text='Soil dataset', null=True)),
                ('additional_input_data_sets', models.TextField(blank=True, help_text='Additional input data sets', null=True)),
                ('exceptions_to_protocol', models.TextField(blank=True, help_text='Did you have to overrule any settings prescribed by the protocol in order to get your model running?', null=True)),
                ('spin_up', models.NullBooleanField(help_text='Did you spin-up your model?')),
                ('spin_up_design', models.TextField(blank=True, help_text='Spin-up design', null=True)),
                ('natural_vegetation_partition', models.TextField(blank=True, help_text='How are areas covered by different types of natural vegetation partitioned?', null=True)),
                ('natural_vegetation_simulation', models.TextField(blank=True, help_text='Do your simulate your own (dynamic) natural vegetation? If so, please describe', null=True)),
                ('natural_vegetation_cover_dataset', models.TextField(blank=True, help_text='If you prescribe natural vegetation cover, which dataset do you use?', null=True)),
                ('management', models.TextField(blank=True, help_text='What specific management and autonomous adaptation measures did you apply?', null=True)),
                ('extreme_events', models.TextField(blank=True, help_text='Key challenges for model in reproducing impacts of extreme events', null=True)),
                ('anything_else', models.TextField(blank=True, help_text='Anything else necessary to reproduce and/or understand the simulation output', null=True)),
                ('comments', models.TextField(blank=True, help_text='Additional comments', null=True)),
                ('climate_data_sets', models.ManyToManyField(blank=True, to='climatemodels.ClimateDataSet')),
                ('climate_variables', models.ManyToManyField(blank=True, to='climatemodels.ClimateVariable')),
                ('contact_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Health',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Permafrost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferencePaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('climate_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General')),
            ],
        ),
        migrations.CreateModel(
            name='SocioEconomicInputVariables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Water',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technological_progress', models.TextField(blank=True, help_text='Does your model account for GDP changes and technological progress? If so, how?', null=True)),
                ('soil', models.TextField(blank=True, help_text='How many soil layers are there?', null=True)),
                ('water_use', models.TextField(blank=True, help_text='What types of water use can your model include?', null=True)),
                ('water_sectors', models.TextField(blank=True, help_text='For the global water model varsoc and pressoc runs, which water sectors did you include?', null=True)),
                ('routing', models.TextField(blank=True, help_text='How do you route runoff in your model?', null=True)),
                ('routing_data', models.TextField(blank=True, help_text='What routing data do you use?', null=True)),
                ('land_use', models.TextField(blank=True, help_text='What effects of land-use change does your model include?', null=True)),
                ('dams_reservoirs', models.TextField(blank=True, help_text='How are dams and reservoirs implemented?', null=True)),
                ('calibration', models.NullBooleanField(help_text='Was the model calibrated?')),
                ('calibration_years', models.TextField(blank=True, help_text='Which years were used for calibration?', null=True)),
                ('calibration_dataset', models.TextField(blank=True, help_text='Which dataset was used for calibration?', null=True)),
                ('calibration_catchments', models.TextField(blank=True, help_text='For approximately how many catchments was the calibration carried out?', null=True)),
                ('vegetation', models.NullBooleanField(help_text='Do you account for CO2 fertilisation?')),
                ('vegetation_presentation', models.TextField(blank=True, help_text='How is vegetation represented?', null=True)),
                ('methods_evapotraspiration', models.TextField(blank=True, help_text='Potential evapotraspiration', null=True)),
                ('methods_snowmelt', models.TextField(blank=True, help_text='Snow melt', null=True)),
                ('general', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='general',
            name='main_reference_paper',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ReferencePaper'),
        ),
        migrations.AddField(
            model_name='general',
            name='socioeconomic_input_variables',
            field=models.ManyToManyField(blank=True, to='climatemodels.SocioEconomicInputVariables'),
        ),
        migrations.AddField(
            model_name='energy',
            name='general',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General'),
        ),
        migrations.AddField(
            model_name='coastalinfrastructure',
            name='general',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General'),
        ),
        migrations.AddField(
            model_name='biomes',
            name='general',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General'),
        ),
        migrations.AddField(
            model_name='agroeconomicmodelling',
            name='general',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General'),
        ),
        migrations.AddField(
            model_name='agriculture',
            name='general',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.General'),
        ),
    ]
