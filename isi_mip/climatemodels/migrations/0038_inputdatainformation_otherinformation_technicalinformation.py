# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-01-11 18:19
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import isi_mip.choiceorotherfield.models


def move_data(apps, schema_editor):
    ImpactModel = apps.get_model('climatemodels', 'ImpactModel')
    TechnicalInformationModel = apps.get_model('climatemodels', 'TechnicalInformation')
    InputDataInformationModel = apps.get_model('climatemodels', 'InputDataInformation')
    OtherInformationModel = apps.get_model('climatemodels', 'OtherInformation')
    for im in ImpactModel.objects.all():
        TechnicalInformationModel.objects.create(
            spatial_aggregation=im.spatial_aggregation,
            spatial_resolution=im.spatial_resolution,
            spatial_resolution_info=im.spatial_resolution_info,
            temporal_resolution_climate=im.temporal_resolution_climate,
            temporal_resolution_co2=im.temporal_resolution_co2,
            temporal_resolution_land=im.temporal_resolution_land,
            temporal_resolution_soil=im.temporal_resolution_soil,
            temporal_resolution_info=im.temporal_resolution_info,
            impact_model=im,
        )
        # Input data
        input_data = InputDataInformationModel.objects.create(
            climate_variables_info=im.climate_variables_info,
            soil_dataset=im.soil_dataset,
            additional_input_data_sets=im.additional_input_data_sets,
            impact_model=im,
        )
        input_data.climate_data_sets = im.climate_data_sets.all()
        input_data.climate_variables = im.climate_variables.all()
        input_data.socioeconomic_input_variables = im.socioeconomic_input_variables.all()
        input_data.save()
        im.input_data = input_data
        im.save()
        # other information
        OtherInformationModel.objects.create(
            exceptions_to_protocol=im.exceptions_to_protocol,
            spin_up=im.spin_up,
            spin_up_design=im.spin_up_design,
            natural_vegetation_partition=im.natural_vegetation_partition,
            natural_vegetation_dynamics=im.natural_vegetation_dynamics,
            natural_vegetation_cover_dataset=im.natural_vegetation_cover_dataset,
            management=im.management,
            extreme_events=im.extreme_events,
            anything_else=im.anything_else,
            impact_model=im,
        )
        im.save()


class Migration(migrations.Migration):

    dependencies = [
        ('climatemodels', '0037_auto_20170111_1439'),
    ]

    operations = [
        migrations.CreateModel(
            name='InputDataInformation',
            fields=[
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='climatemodels.ImpactModel')),
                ('climate_variables_info', models.TextField(blank=True, help_text='Including how variables were derived that were not included in the ISIMIP input data', verbose_name='Additional climate variables information')),
                ('soil_dataset', models.TextField(blank=True, help_text='HWSD or GSWP3 were provided', null=True, verbose_name='Soil dataset')),
                ('additional_input_data_sets', models.TextField(blank=True, help_text='Data sets used to drive the model that were not provided by ISIMIP', null=True, verbose_name='Additional input data sets')),
                ('climate_data_sets', models.ManyToManyField(blank=True, help_text='The climate-input data sets used in this simulation round', to='climatemodels.InputData', verbose_name='Climate data sets used')),
                ('climate_variables', models.ManyToManyField(blank=True, help_text='Including variables that were derived from those provided in the ISIMIP input data set', to='climatemodels.ClimateVariable', verbose_name='Climate variables')),
                ('socioeconomic_input_variables', models.ManyToManyField(blank=True, help_text='Including resolution where relevant', to='climatemodels.SocioEconomicInputVariables', verbose_name='Socio-economic input variables')),
            ],
        ),
        migrations.CreateModel(
            name='OtherInformation',
            fields=[
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='climatemodels.ImpactModel')),
                ('exceptions_to_protocol', models.TextField(blank=True, help_text='Any settings prescribed by the ISIMIP protocol that were overruled when runing the model', null=True, verbose_name='Exceptions')),
                ('spin_up', models.NullBooleanField(choices=[(None, '---------'), (True, 'Yes'), (False, 'No')], help_text="'No' indicates the simulations were run starting in the first reporting year 1971", verbose_name='Was a spin-up performed?')),
                ('spin_up_design', models.TextField(blank=True, help_text='Including the length of the spin up, the CO2 concentration used, and any deviations from the spin-up procedure defined in the protocol', null=True, verbose_name='Spin-up design')),
                ('natural_vegetation_partition', models.TextField(blank=True, help_text='How areas covered by different types of natural vegetation are partitioned', null=True)),
                ('natural_vegetation_dynamics', models.TextField(blank=True, help_text='Description of how natural vegetation is simulated dynamically where relevant', null=True)),
                ('natural_vegetation_cover_dataset', models.TextField(blank=True, help_text='Dataset used if natural vegetation cover is prescribed', null=True)),
                ('management', models.TextField(blank=True, help_text='Specific management and autonomous adaptation measures applied. E.g. varying sowing dates in crop models, dbh-related harvesting in forest models.', null=True)),
                ('extreme_events', models.TextField(blank=True, help_text='Key challenges for this model in reproducing impacts of extreme events', null=True, verbose_name='Key challenges')),
                ('anything_else', models.TextField(blank=True, help_text='Anything else necessary to reproduce and/or understand the simulation output', null=True, verbose_name='Additional comments')),
            ],
        ),
        migrations.CreateModel(
            name='TechnicalInformation',
            fields=[
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='climatemodels.ImpactModel')),
                ('spatial_resolution', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('0.5°x0.5°', '0.5°x0.5°')], help_text='The spatial resolution at which the ISIMIP simulations were run, if on a regular grid. Data was provided on a 0.5°x0.5° grid', max_length=500, null=True, verbose_name='Spatial Resolution')),
                ('spatial_resolution_info', models.TextField(blank=True, help_text='Anything else necessary to understand the spatial aggregation and resolution at which the model operates', verbose_name='Additional spatial aggregation & resolution information')),
                ('temporal_resolution_climate', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('daily', 'daily'), ('monthly', 'monthly'), ('annual', 'annual')], help_text='ISIMIP data was provided in daily time steps', max_length=500, null=True, verbose_name='Temporal resolution of input data: climate variables')),
                ('temporal_resolution_co2', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], help_text='ISIMIP data was provided in annual time steps', max_length=500, null=True, verbose_name='Temporal resolution of input data: CO2')),
                ('temporal_resolution_land', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], help_text='ISIMIP data was provided in annual time steps', max_length=500, null=True, verbose_name='Temporal resolution of input data: land use/land cover')),
                ('temporal_resolution_soil', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('constant', 'constant')], help_text='ISIMIP data was fixed over time', max_length=500, null=True, verbose_name='Temporal resolution of input data: soil')),
                ('temporal_resolution_info', models.TextField(blank=True, help_text='Anything else necessary to understand the temporal resolution at which the model operates', verbose_name='Additional temporal resolution information')),
                ('spatial_aggregation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='climatemodels.SpatialAggregation')),
            ],
        ),
        # save old data before removing fields
        migrations.RunPython(
            move_data
        ),
    ]
