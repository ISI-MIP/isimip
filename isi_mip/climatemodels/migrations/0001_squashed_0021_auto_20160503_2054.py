# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-02 11:13
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import isi_mip.choiceorotherfield.models


class Migration(migrations.Migration):

    replaces = [('climatemodels', '0001_initial'), ('climatemodels', '0002_auto_20160308_1255'), ('climatemodels', '0003_auto_20160308_1302'), ('climatemodels', '0004_auto_20160322_1756'), ('climatemodels', '0005_auto_20160330_1106'), ('climatemodels', '0006_auto_20160330_1107'), ('climatemodels', '0007_auto_20160330_1148'), ('climatemodels', '0008_auto_20160330_1830'), ('climatemodels', '0009_auto_20160330_1834'), ('climatemodels', '0010_auto_20160331_1458'), ('climatemodels', '0011_auto_20160407_1050'), ('climatemodels', '0012_auto_20160411_1630'), ('climatemodels', '0013_auto_20160418_0835'), ('climatemodels', '0014_auto_20160418_1100'), ('climatemodels', '0015_auto_20160419_1803'), ('climatemodels', '0016_auto_20160420_1411'), ('climatemodels', '0017_auto_20160420_1434'), ('climatemodels', '0018_auto_20160420_2047'), ('climatemodels', '0019_inputdata_download_instructions'), ('climatemodels', '0020_auto_20160426_1306'), ('climatemodels', '0021_auto_20160503_2054')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sciencepaper', '0001_squashed_0004_auto_20160602_1309'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agriculture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crops', models.TextField(blank=True, null=True, verbose_name='Crops')),
                ('land_coverage', models.TextField(blank=True, null=True, verbose_name='Land coverage')),
                ('planting_date_decision', models.TextField(blank=True, null=True, verbose_name='Planting date decision')),
                ('planting_density', models.TextField(blank=True, null=True, verbose_name='Planting density')),
                ('crop_cultivars', models.TextField(blank=True, null=True, verbose_name='Crop cultivars')),
                ('fertilizer_application', models.TextField(blank=True, null=True, verbose_name='Fertilizer application')),
                ('irrigation', models.TextField(blank=True, null=True, verbose_name='Irrigation')),
                ('crop_residue', models.TextField(blank=True, null=True, verbose_name='Crop residue')),
                ('initial_soil_water', models.TextField(blank=True, null=True, verbose_name='Initial soil water')),
                ('initial_soil_nitrate_and_ammonia', models.TextField(blank=True, null=True, verbose_name='Initial soil nitrate and ammonia')),
                ('initial_soil_C_and_OM', models.TextField(blank=True, null=True, verbose_name='Initial soil C and OM')),
                ('initial_crop_residue', models.TextField(blank=True, null=True, verbose_name='Initial crop residue')),
                ('lead_area_development', models.TextField(blank=True, null=True, verbose_name='Lead area development')),
                ('light_interception', models.TextField(blank=True, null=True, verbose_name='Light interception')),
                ('light_utilization', models.TextField(blank=True, null=True, verbose_name='Light utilization')),
                ('yield_formation', models.TextField(blank=True, null=True, verbose_name='Yield formation')),
                ('crop_phenology', models.TextField(blank=True, null=True, verbose_name='Crop phenology')),
                ('root_distribution_over_depth', models.TextField(blank=True, null=True, verbose_name='Root distribution over depth')),
                ('stresses_involved', models.TextField(blank=True, null=True, verbose_name='Stresses involved')),
                ('type_of_water_stress', models.TextField(blank=True, null=True, verbose_name='Type of water stress')),
                ('type_of_heat_stress', models.TextField(blank=True, null=True, verbose_name='Type of heat stress')),
                ('water_dynamics', models.TextField(blank=True, null=True, verbose_name='Water dynamics')),
                ('evapo_transpiration', models.TextField(blank=True, null=True, verbose_name='Evapo-transpiration')),
                ('soil_CN_modeling', models.TextField(blank=True, null=True, verbose_name='Soil CN modeling')),
                ('co2_effects', models.TextField(blank=True, null=True, verbose_name='CO2 Effects')),
                ('parameters_number_and_description', models.TextField(blank=True, null=True, verbose_name='Parameters, number and description')),
                ('calibrated_values', models.TextField(blank=True, null=True, verbose_name='Calibrated values')),
                ('output_variable_and_dataset', models.TextField(blank=True, null=True, verbose_name='Output variable and dataset for calibration validation')),
                ('spatial_scale_of_calibration_validation', models.TextField(blank=True, null=True, verbose_name='Spatial scale of calibration/validation')),
                ('temporal_scale_of_calibration_validation', models.TextField(blank=True, null=True, verbose_name='Temporal scale of calibration/validation')),
                ('criteria_for_evaluation', models.TextField(blank=True, null=True, verbose_name='Criteria for evaluation (validation)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Biodiversity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Biomes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('output', models.TextField(blank=True, null=True)),
                ('output_per_pft', models.TextField(blank=True, null=True)),
                ('considerations', models.TextField(blank=True, help_text='Things to consider, when calculating basic variables such as GPP, NPP, RA, RH from your modeling', null=True)),
                ('dynamic_vegetation', models.TextField(blank=True, null=True)),
                ('nitrogen_limitation', models.TextField(blank=True, null=True)),
                ('co2_effects', models.TextField(blank=True, null=True)),
                ('light_interception', models.TextField(blank=True, null=True)),
                ('light_utilization', models.TextField(blank=True, null=True)),
                ('phenology', models.TextField(blank=True, null=True)),
                ('water_stress', models.TextField(blank=True, null=True)),
                ('heat_stress', models.TextField(blank=True, null=True)),
                ('evapotranspiration_approaches', models.TextField(blank=True, null=True, verbose_name='Evapo-transpiration approaches')),
                ('rooting_depth_differences', models.TextField(blank=True, null=True, verbose_name='Differences in rooting depth')),
                ('root_distribution', models.TextField(blank=True, null=True, verbose_name='Root distribution over depth')),
                ('permafrost', models.TextField(blank=True, null=True)),
                ('closed_energy_balance', models.TextField(blank=True, null=True)),
                ('soil_moisture_surface_temperature_coupling', models.TextField(blank=True, null=True)),
                ('latent_heat', models.TextField(blank=True, null=True)),
                ('sensible_heat', models.TextField(blank=True, null=True)),
                ('mortality_age', models.TextField(blank=True, null=True, verbose_name='Age')),
                ('mortality_fire', models.TextField(blank=True, null=True, verbose_name='Fire')),
                ('mortality_drought', models.TextField(blank=True, null=True, verbose_name='Drought')),
                ('mortality_insects', models.TextField(blank=True, null=True, verbose_name='Insects')),
                ('mortality_storm', models.TextField(blank=True, null=True, verbose_name='Storm')),
                ('mortality_stochastic_random_disturbance', models.TextField(blank=True, null=True, verbose_name='Stochastic random disturbance')),
                ('mortality_other', models.TextField(blank=True, null=True, verbose_name='Other')),
                ('mortality_remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('nbp_fire', models.TextField(blank=True, null=True, verbose_name='Fire')),
                ('nbp_landuse_change', models.TextField(blank=True, null=True, verbose_name='Land-use change')),
                ('nbp_harvest', models.TextField(blank=True, null=True, verbose_name='Hharvest')),
                ('nbp_other', models.TextField(blank=True, null=True, verbose_name='Other')),
                ('nbp_comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('list_of_pfts', models.TextField(blank=True, null=True, verbose_name='List of PFTs')),
                ('pfts_comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClimateDataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClimateVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('abbreviation', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CoastalInfrastructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Energy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.TextField(blank=True, null=True, verbose_name='Model type')),
                ('temporal_extent', models.TextField(blank=True, null=True, verbose_name='Temporal extent')),
                ('temporal_resolution', models.TextField(blank=True, null=True, verbose_name='Temporal resolution')),
                ('data_format_for_input', models.TextField(blank=True, null=True, verbose_name='Data format for input')),
                ('impact_types_energy_demand', models.TextField(blank=True, null=True, verbose_name='Energy demand (heat & cooling)')),
                ('impact_types_temperature_effects_on_thermal_power', models.TextField(blank=True, null=True, verbose_name='temperature effects on thermal power')),
                ('impact_types_weather_effects_on_renewables', models.TextField(blank=True, null=True, verbose_name='Weather effects on renewables')),
                ('impact_types_water_scarcity_impacts', models.TextField(blank=True, null=True, verbose_name='Water scarcity impacts')),
                ('impact_types_other', models.TextField(blank=True, null=True, verbose_name='Other (agriculture, infrastructure, adaptation)')),
                ('output_energy_demand', models.TextField(blank=True, null=True, verbose_name='Energy demand (heating & cooling)')),
                ('output_energy_supply', models.TextField(blank=True, null=True, verbose_name='Energy supply')),
                ('output_water_scarcity', models.TextField(blank=True, null=True, verbose_name='Water scarcity')),
                ('output_economics', models.TextField(blank=True, null=True, verbose_name='Economics')),
                ('output_other', models.TextField(blank=True, null=True, verbose_name='Other (agriculture, infrastructure, adaptation)')),
                ('variables_not_directly_from_GCMs', models.TextField(blank=True, null=True, verbose_name='Variables not directly from GCMs')),
                ('response_function_of_energy_demand_to_HDD_CDD', models.TextField(blank=True, null=True, verbose_name='Response function of energy demand to HDD/CDD')),
                ('factor_definition_and_calculation', models.TextField(blank=True, null=True, verbose_name='Definition and calculation of variable potential and load factor')),
                ('biomass_types', models.TextField(blank=True, null=True, verbose_name='Biomass types')),
                ('maximum_potential_assumption', models.TextField(blank=True, null=True, verbose_name='Maximum potential assumption')),
                ('bioenergy_supply_costs', models.TextField(blank=True, null=True, verbose_name='Bioenergy supply costs')),
                ('socioeconomic_input', models.TextField(blank=True, null=True, verbose_name='Socio-economic input')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Health',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImpactModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('sector', models.CharField(choices=[('Agriculture', 'Agriculture'), ('Energy', 'Energy'), ('Water (global)', 'Water (global)'), ('Water (regional)', 'Water (regional)'), ('Biomes', 'Biomes'), ('Forests', 'Forests'), ('Marine Ecosystems and Fisheries (global)', 'Marine Ecosystems and Fisheries (global)'), ('Marine Ecosystems and Fisheries (regional)', 'Marine Ecosystems and Fisheries (regional)'), ('Biodiversity', 'Biodiversity'), ('Health', 'Health'), ('Coastal Infrastructure', 'Coastal Infrastructure'), ('Permafrost', 'Permafrost')], max_length=500)),
                ('contact_person_name', models.CharField(blank=True, max_length=500, null=True)),
                ('contact_person_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_person_institute', models.CharField(blank=True, max_length=500, null=True)),
                ('version', models.CharField(blank=True, max_length=500, null=True)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('resolution', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('0.5°x0.5°', '0.5°x0.5°')], max_length=500, null=True)),
                ('temporal_resolution_climate', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('daily', 'daily'), ('monthly', 'monthly'), ('annual', 'annual')], max_length=500, null=True)),
                ('temporal_resolution_co2', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], max_length=500, null=True)),
                ('temporal_resolution_land', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], max_length=500, null=True)),
                ('temporal_resolution_soil', isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], max_length=500, null=True)),
                ('soil_dataset', models.TextField(blank=True, help_text='Soil dataset', null=True)),
                ('additional_input_data_sets', models.TextField(blank=True, help_text='Additional input data sets', null=True)),
                ('exceptions_to_protocol', models.TextField(blank=True, help_text='Did you have to overrule any settings prescribed by the protocol in order to get your model running?', null=True)),
                ('spin_up', models.NullBooleanField(help_text='Did you spin-up your model?')),
                ('spin_up_design', models.TextField(blank=True, help_text='Spin-up design', null=True)),
                ('natural_vegetation_partition', models.TextField(blank=True, help_text='How are areas covered by different types of natural vegetation partitioned?', null=True)),
                ('natural_vegetation_simulation', models.TextField(blank=True, help_text='Do your simulate your own (dynamic) natural vegetation? If so, please describe', null=True)),
                ('natural_vegetation_cover_dataset', models.TextField(blank=True, help_text='If you prescribe natural vegetation cover, which dataset do you use?', null=True)),
                ('management', models.TextField(blank=True, help_text='What specific management and autonomous adaptation measures did you apply?', null=True)),
                ('extreme_events', models.TextField(blank=True, help_text='Key challenges for model in reproducing impacts of extreme events', null=True)),
                ('anything_else', models.TextField(blank=True, help_text='Anything else necessary to reproduce and/or understand the simulation output', null=True)),
                ('comments', models.TextField(blank=True, help_text='Additional comments', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InputData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_set', models.CharField(max_length=500, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('data_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ClimateDataType')),
            ],
            options={
                'verbose_name_plural': 'Input data',
            },
        ),
        migrations.CreateModel(
            name='InputPhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MarineEcosystemsGlobal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defining_features', models.TextField(blank=True, null=True, verbose_name='Defining features')),
                ('spatial_scale', models.TextField(blank=True, null=True, verbose_name='Spatial scale')),
                ('spatial_resolution', models.TextField(blank=True, null=True, verbose_name='Spatial resolution')),
                ('temporal_scale', models.TextField(blank=True, null=True, verbose_name='Temporal scale')),
                ('temporal_resolution', models.TextField(blank=True, null=True, verbose_name='Temporal resolution')),
                ('taxonomic_scope', models.TextField(blank=True, null=True, verbose_name='Taxonomic scope')),
                ('vertical_resolution', models.TextField(blank=True, null=True, verbose_name='Vertical resolution')),
                ('spatial_dispersal_included', models.TextField(blank=True, null=True, verbose_name='Spatial dispersal included')),
                ('fishbase_used_for_mass_length_conversion', models.TextField(blank=True, null=True, verbose_name='Is FishBase used for mass-length conversion?')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutputData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sector', models.CharField(choices=[('Agriculture', 'Agriculture'), ('Energy', 'Energy'), ('Water (global)', 'Water (global)'), ('Water (regional)', 'Water (regional)'), ('Biomes', 'Biomes'), ('Forests', 'Forests'), ('Marine Ecosystems and Fisheries (global)', 'Marine Ecosystems and Fisheries (global)'), ('Marine Ecosystems and Fisheries (regional)', 'Marine Ecosystems and Fisheries (regional)'), ('Biodiversity', 'Biodiversity'), ('Health', 'Health'), ('Coastal Infrastructure', 'Coastal Infrastructure'), ('Permafrost', 'Permafrost')], max_length=500)),
                ('date', models.DateField()),
                ('drivers', models.ManyToManyField(to='climatemodels.InputData')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'verbose_name_plural': 'Output data',
            },
        ),
        migrations.CreateModel(
            name='Permafrost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferencePaper',
            fields=[
                ('paper_ptr', models.OneToOneField(auto_created=True, default='', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sciencepaper.Paper')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SocioEconomicInputVariables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WaterGlobal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technological_progress', models.TextField(blank=True, help_text='Does the model account for GDP changes and technological progress? If so, how are these integrated into the runs?', null=True)),
                ('water_use', models.TextField(blank=True, help_text='Which types of water use are included?', null=True, verbose_name='Water-use types')),
                ('water_sectors', models.TextField(blank=True, help_text='For the global-water-model varsoc and pressoc runs, which water sectors were included? E.g. irrigation, domestic, manufacturing, electricity, livestock.', null=True, verbose_name='Water-use sectors')),
                ('routing', models.TextField(blank=True, help_text='How is runoff routed?', null=True, verbose_name='Runoff routing')),
                ('routing_data', models.TextField(blank=True, help_text='Which routing data are used?', null=True)),
                ('land_use', models.TextField(blank=True, help_text='Which land-use change effects are included?', null=True, verbose_name='Land-use change effects')),
                ('dams_reservoirs', models.TextField(blank=True, help_text='Describe how are dams and reservoirs are implemented', null=True, verbose_name='Dams & Reservoirs')),
                ('calibration', models.BooleanField(default=False, verbose_name='Was the model calibrated?')),
                ('calibration_years', models.TextField(blank=True, null=True, verbose_name='Which years were used for calibration?')),
                ('calibration_dataset', models.TextField(blank=True, help_text='E.g. WFD, GSWP3', null=True, verbose_name='Which dataset was used for calibration?')),
                ('calibration_catchments', models.TextField(blank=True, null=True, verbose_name='How many catchments were callibrated?')),
                ('vegetation', models.BooleanField(default=False, verbose_name='Is CO2 fertilisation accounted for?')),
                ('vegetation_representation', models.TextField(blank=True, null=True, verbose_name='How is vegetation represented?')),
                ('methods_evapotraspiration', models.TextField(blank=True, null=True, verbose_name='Potential evapotraspiration')),
                ('methods_snowmelt', models.TextField(blank=True, null=True, verbose_name='Snow melt')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
                ('soil_layers', models.TextField(blank=True, help_text='How many soil layers are used? Which qualities do they have?', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='inputdata',
            name='phase',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.InputPhase'),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='climate_data_sets',
            field=models.ManyToManyField(blank=True, help_text='The climate-input data sets used in this simulation round', to='climatemodels.InputData', verbose_name='Climate data sets used'),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='climate_variables',
            field=models.ManyToManyField(blank=True, help_text='Include variables that were derived from those provided in the ISIMIP input data set', to='climatemodels.ClimateVariable'),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='main_reference_paper',
            field=models.ForeignKey(blank=True, help_text='The single paper that should be cited when referring to simulation output from this model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_ref', to='climatemodels.ReferencePaper'),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='region',
            field=models.ManyToManyField(help_text='For which regions does the model produce results?', to='climatemodels.Region'),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='socioeconomic_input_variables',
            field=models.ManyToManyField(blank=True, help_text='Include resolution if relevant', to='climatemodels.SocioEconomicInputVariables', verbose_name='Socio-economic input variables'),
        ),
        migrations.AddField(
            model_name='health',
            name='impact_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel'),
        ),
        migrations.AddField(
            model_name='energy',
            name='impact_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel'),
        ),
        migrations.AddField(
            model_name='coastalinfrastructure',
            name='impact_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel'),
        ),
        migrations.AddField(
            model_name='biomes',
            name='impact_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel'),
        ),
        migrations.AddField(
            model_name='biodiversity',
            name='impact_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel'),
        ),
        migrations.AddField(
            model_name='agriculture',
            name='impact_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel'),
        ),
        migrations.RemoveField(
            model_name='impactmodel',
            name='contact_person_email',
        ),
        migrations.RemoveField(
            model_name='impactmodel',
            name='contact_person_institute',
        ),
        migrations.RemoveField(
            model_name='impactmodel',
            name='contact_person_name',
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='version',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='Model Version'),
        ),
        migrations.RemoveField(
            model_name='impactmodel',
            name='natural_vegetation_simulation',
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='natural_vegetation_dynamics',
            field=models.TextField(blank=True, help_text='Is natural vegetation simulated dynamically? If so, please describe.', null=True),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='other_references',
            field=models.ManyToManyField(blank=True, to='climatemodels.ReferencePaper'),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='additional_input_data_sets',
            field=models.TextField(blank=True, help_text='List here any data sets used to drive the model that were not provided by ISIMIP', null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='comments',
            field=models.TextField(blank=True, null=True, verbose_name='Additional comments'),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='exceptions_to_protocol',
            field=models.TextField(blank=True, help_text='Were any settings prescribed by the protocol overruled in order to run the model?', null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='extreme_events',
            field=models.TextField(blank=True, help_text='Which are the key challenges for this model in reproducing impacts of extreme events?', null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='management',
            field=models.TextField(blank=True, help_text='Which specific management and autonomous adaptation measures were applied? E.g. varying sowing dates in crop modles, dbh-related harvesting in forest models.', null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='natural_vegetation_cover_dataset',
            field=models.TextField(blank=True, help_text='If natural vegetation cover is prescribed, which dataset is used?', null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='resolution',
            field=isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('0.5°x0.5°', '0.5°x0.5°')], help_text='The spatial resolution at which the ISIMIP simulations were run, if on a regular grid. Data was provided on a 0.5°x0.5° grid', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='short_description',
            field=models.TextField(blank=True, help_text='This short description should assist other researchers in briefly describing the model in a paper.', null=True, verbose_name='Short model description'),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='soil_dataset',
            field=models.TextField(blank=True, help_text='HWSD or GSWP3 were provided', null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='spin_up',
            field=models.NullBooleanField(help_text="'No' indicates the simulations were run starting in the first reporting year 1971', verbose_name='Did you spin-up your model?"),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='spin_up_design',
            field=models.TextField(blank=True, help_text='Include the length of the spin up, the CO2 concentration used, and any deviations from the spin-up procedure defined in the protocol.', null=True, verbose_name='Spin-up design'),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='temporal_resolution_climate',
            field=isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('daily', 'daily'), ('monthly', 'monthly'), ('annual', 'annual')], help_text='ISIMIP data was provided in daily time steps', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='temporal_resolution_co2',
            field=isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], help_text='ISIMIP data was provided in annual time steps', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='temporal_resolution_land',
            field=isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('annual', 'annual')], help_text='ISIMIP data was provided in annual time steps', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='temporal_resolution_soil',
            field=isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('constant', 'constant')], help_text='ISIMIP data was constant in time', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='simulation_round',
            field=models.ManyToManyField(blank=True, help_text='For which ISIMIP simulation round are these model details relevant?', to='climatemodels.SimulationRound'),
        ),
        migrations.AddField(
            model_name='impactmodel',
            name='spatial_aggregation',
            field=models.ForeignKey(blank=True, help_text='e.g. regular grid, points, hyrdotopes...', null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.SpatialAggregation'),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='spin_up',
            field=models.NullBooleanField(choices=[(None, '---------'), (True, 'Yes'), (False, 'No')], help_text='`No` indicates the simulations were run starting in the first reporting year 1971', verbose_name='Did you spin-up your model?'),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='resolution',
            field=isi_mip.choiceorotherfield.models.ChoiceOrOtherField(blank=True, choices=[('0.5°x0.5°', '0.5°x0.5°')], help_text='The spatial resolution at which the ISIMIP simulations were run, if on a regular grid. Data was provided on a 0.5°x0.5° grid', max_length=500, null=True, verbose_name='Spatial Resolution'),
        ),
        migrations.AlterUniqueTogether(
            name='impactmodel',
            unique_together=set([('name', 'sector')]),
        ),
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('institute', models.CharField(blank=True, max_length=500, null=True)),
                ('impact_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
        ),
        migrations.CreateModel(
            name='SimulationRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpatialAggregation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='biomes',
            name='evapotranspiration_approaches',
        ),
        migrations.AddField(
            model_name='biomes',
            name='evapotranspiration_approach',
            field=models.TextField(blank=True, null=True, verbose_name='Evapo-transpiration approach'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='considerations',
            field=models.TextField(blank=True, help_text='Things to consider, when calculating basic variables such as GPP, NPP, RA, RH from the model.', null=True),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='light_utilization',
            field=models.TextField(blank=True, help_text='photosynthesis, RUE- approach?', null=True),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='list_of_pfts',
            field=models.TextField(blank=True, help_text='Provide a list of PFTs using the folllowing format: <pft1_long_name> (<pft1_short_name>); <pft2_long_name> (<pft2_short_name>). Include long name in brackets if no short name is available.', null=True, verbose_name='List of PFTs'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='nbp_harvest',
            field=models.TextField(blank=True, help_text='1: crops, 2: harvest from forest management, 3: harvest from grassland management', null=True, verbose_name='Harvest'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='nbp_landuse_change',
            field=models.TextField(blank=True, help_text='Deforestation, harvest and other land-use changes', null=True, verbose_name='Land-use change'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='nbp_other',
            field=models.TextField(blank=True, null=True, verbose_name='Other processes'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='output',
            field=models.TextField(blank=True, help_text='Is output (e.g. PFT cover) written out per grid-cell area or per land and water area within a grid cell, or land only?', null=True, verbose_name='Output format'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='output_per_pft',
            field=models.TextField(blank=True, help_text='Is output per PFT per unit area of that PFT, i.e. requiring weighting by the fractional coverage of each PFT to get the gridbox average?', null=True),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='rooting_depth_differences',
            field=models.TextField(blank=True, help_text='Include how it changes.', null=True, verbose_name='Differences in rooting depth'),
        ),
        migrations.AlterField(
            model_name='biomes',
            name='soil_moisture_surface_temperature_coupling',
            field=models.TextField(blank=True, null=True, verbose_name='Coupling/feedback between soil moisture and surface temperature'),
        ),
        migrations.AlterField(
            model_name='energy',
            name='impact_types_energy_demand',
            field=models.TextField(blank=True, null=True, verbose_name='Energy demand (heating & cooling)'),
        ),
        migrations.AlterField(
            model_name='energy',
            name='impact_types_temperature_effects_on_thermal_power',
            field=models.TextField(blank=True, null=True, verbose_name='Temperature effects on thermal power'),
        ),
        migrations.CreateModel(
            name='MarineEcosystemsRegional',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defining_features', models.TextField(blank=True, null=True, verbose_name='Defining features')),
                ('spatial_scale', models.TextField(blank=True, null=True, verbose_name='Spatial scale')),
                ('spatial_resolution', models.TextField(blank=True, null=True, verbose_name='Spatial resolution')),
                ('temporal_scale', models.TextField(blank=True, null=True, verbose_name='Temporal scale')),
                ('temporal_resolution', models.TextField(blank=True, null=True, verbose_name='Temporal resolution')),
                ('taxonomic_scope', models.TextField(blank=True, null=True, verbose_name='Taxonomic scope')),
                ('vertical_resolution', models.TextField(blank=True, null=True, verbose_name='Vertical resolution')),
                ('spatial_dispersal_included', models.TextField(blank=True, null=True, verbose_name='Spatial dispersal included')),
                ('fishbase_used_for_mass_length_conversion', models.TextField(blank=True, null=True, verbose_name='Is FishBase used for mass-length conversion?')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterRegional',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technological_progress', models.TextField(blank=True, help_text='Does the model account for GDP changes and technological progress? If so, how are these integrated into the runs?', null=True)),
                ('soil_layers', models.TextField(blank=True, help_text='How many soil layers are used? Which qualities do they have?', null=True)),
                ('water_use', models.TextField(blank=True, help_text='Which types of water use are included?', null=True, verbose_name='Water-use types')),
                ('water_sectors', models.TextField(blank=True, help_text='For the global-water-model varsoc and pressoc runs, which water sectors were included? E.g. irrigation, domestic, manufacturing, electricity, livestock.', null=True, verbose_name='Water-use sectors')),
                ('routing', models.TextField(blank=True, help_text='How is runoff routed?', null=True, verbose_name='Runoff routing')),
                ('routing_data', models.TextField(blank=True, help_text='Which routing data are used?', null=True)),
                ('land_use', models.TextField(blank=True, help_text='Which land-use change effects are included?', null=True, verbose_name='Land-use change effects')),
                ('dams_reservoirs', models.TextField(blank=True, help_text='Describe how are dams and reservoirs are implemented', null=True, verbose_name='Dams & Reservoirs')),
                ('calibration', models.BooleanField(default=False, verbose_name='Was the model calibrated?')),
                ('calibration_years', models.TextField(blank=True, null=True, verbose_name='Which years were used for calibration?')),
                ('calibration_dataset', models.TextField(blank=True, help_text='E.g. WFD, GSWP3', null=True, verbose_name='Which dataset was used for calibration?')),
                ('calibration_catchments', models.TextField(blank=True, null=True, verbose_name='How many catchments were callibrated?')),
                ('vegetation', models.BooleanField(default=False, verbose_name='Is CO2 fertilisation accounted for?')),
                ('vegetation_representation', models.TextField(blank=True, null=True, verbose_name='How is vegetation represented?')),
                ('methods_evapotraspiration', models.TextField(blank=True, null=True, verbose_name='Potential evapotraspiration')),
                ('methods_snowmelt', models.TextField(blank=True, null=True, verbose_name='Snow melt')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Forests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('output', models.TextField(blank=True, help_text='Is output (e.g. PFT cover) written out per grid-cell area or per land and water area within a grid cell, or land only?', null=True, verbose_name='Output format')),
                ('output_per_pft', models.TextField(blank=True, help_text='Is output per PFT per unit area of that PFT, i.e. requiring weighting by the fractional coverage of each PFT to get the gridbox average?', null=True)),
                ('considerations', models.TextField(blank=True, help_text='Things to consider, when calculating basic variables such as GPP, NPP, RA, RH from the model.', null=True)),
                ('dynamic_vegetation', models.TextField(blank=True, null=True)),
                ('nitrogen_limitation', models.TextField(blank=True, null=True)),
                ('co2_effects', models.TextField(blank=True, null=True)),
                ('light_interception', models.TextField(blank=True, null=True)),
                ('light_utilization', models.TextField(blank=True, help_text='photosynthesis, RUE- approach?', null=True)),
                ('phenology', models.TextField(blank=True, null=True)),
                ('water_stress', models.TextField(blank=True, null=True)),
                ('heat_stress', models.TextField(blank=True, null=True)),
                ('evapotranspiration_approach', models.TextField(blank=True, null=True, verbose_name='Evapo-transpiration approach')),
                ('rooting_depth_differences', models.TextField(blank=True, help_text='Include how it changes.', null=True, verbose_name='Differences in rooting depth')),
                ('root_distribution', models.TextField(blank=True, null=True, verbose_name='Root distribution over depth')),
                ('permafrost', models.TextField(blank=True, null=True)),
                ('closed_energy_balance', models.TextField(blank=True, null=True)),
                ('soil_moisture_surface_temperature_coupling', models.TextField(blank=True, null=True, verbose_name='Coupling/feedback between soil moisture and surface temperature')),
                ('latent_heat', models.TextField(blank=True, null=True)),
                ('sensible_heat', models.TextField(blank=True, null=True)),
                ('mortality_age', models.TextField(blank=True, null=True, verbose_name='Age')),
                ('mortality_fire', models.TextField(blank=True, null=True, verbose_name='Fire')),
                ('mortality_drought', models.TextField(blank=True, null=True, verbose_name='Drought')),
                ('mortality_insects', models.TextField(blank=True, null=True, verbose_name='Insects')),
                ('mortality_storm', models.TextField(blank=True, null=True, verbose_name='Storm')),
                ('mortality_stochastic_random_disturbance', models.TextField(blank=True, null=True, verbose_name='Stochastic random disturbance')),
                ('mortality_other', models.TextField(blank=True, null=True, verbose_name='Other')),
                ('mortality_remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('nbp_fire', models.TextField(blank=True, null=True, verbose_name='Fire')),
                ('nbp_landuse_change', models.TextField(blank=True, help_text='Deforestation, harvest and other land-use changes', null=True, verbose_name='Land-use change')),
                ('nbp_harvest', models.TextField(blank=True, help_text='1: crops, 2: harvest from forest management, 3: harvest from grassland management', null=True, verbose_name='Harvest')),
                ('nbp_other', models.TextField(blank=True, null=True, verbose_name='Other processes')),
                ('nbp_comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('list_of_pfts', models.TextField(blank=True, help_text='Provide a list of PFTs using the folllowing format: <pft1_long_name> (<pft1_short_name>); <pft2_long_name> (<pft2_short_name>). Include long name in brackets if no short name is available.', null=True, verbose_name='List of PFTs')),
                ('pfts_comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'verbose_name_plural': 'Forests',
                'verbose_name': 'Forests',
            },
        ),
        migrations.AlterModelOptions(
            name='biomes',
            options={'verbose_name': 'Biomes', 'verbose_name_plural': 'Biomes'},
        ),
        migrations.AlterModelOptions(
            name='marineecosystemsglobal',
            options={'verbose_name': 'Marine Ecosystems and Fisheries (global)', 'verbose_name_plural': 'Marine Ecosystems and Fisheries (global)'},
        ),
        migrations.AlterModelOptions(
            name='marineecosystemsregional',
            options={'verbose_name': 'Marine Ecosystems and Fisheries (regional)', 'verbose_name_plural': 'Marine Ecosystems and Fisheries (regional)'},
        ),
        migrations.AlterModelOptions(
            name='waterglobal',
            options={'verbose_name': 'Water (global)', 'verbose_name_plural': 'Water (global)'},
        ),
        migrations.AlterModelOptions(
            name='waterregional',
            options={'verbose_name': 'Water (regional)', 'verbose_name_plural': 'Water (regional)'},
        ),
        migrations.CreateModel(
            name='AgroEconomicModelling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'verbose_name_plural': 'Agro-Economic Modelling',
                'verbose_name': 'Agro-Economic Modelling',
            },
        ),
        migrations.CreateModel(
            name='ComputableGeneralEquilibriumModelling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='climatemodels.ImpactModel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RenameField(
            model_name='inputdata',
            old_name='data_set',
            new_name='name',
        ),
        migrations.AddField(
            model_name='inputdata',
            name='caveats',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='inputdata',
            name='variables',
            field=models.ManyToManyField(blank=True, to='climatemodels.ClimateVariable'),
        ),
        migrations.AddField(
            model_name='outputdata',
            name='scenarios',
            field=models.ManyToManyField(to='climatemodels.Scenario'),
        ),
        migrations.AddField(
            model_name='inputdata',
            name='scenario',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='climatemodels.Scenario'),
        ),
        migrations.AlterModelOptions(
            name='coastalinfrastructure',
            options={'verbose_name': 'Coastal Infrastructure', 'verbose_name_plural': 'Coastal Infrastructure'},
        ),
        migrations.AlterModelOptions(
            name='computablegeneralequilibriummodelling',
            options={'verbose_name': 'Computable General Equilibrium Modelling', 'verbose_name_plural': 'Computable General Equilibrium Modelling'},
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='sector',
            field=models.CharField(choices=[('Agriculture', 'Agriculture'), ('Energy', 'Energy'), ('Water (global)', 'Water (global)'), ('Water (regional)', 'Water (regional)'), ('Biomes', 'Biomes'), ('Forests', 'Forests'), ('Marine Ecosystems and Fisheries (global)', 'Marine Ecosystems and Fisheries (global)'), ('Marine Ecosystems and Fisheries (regional)', 'Marine Ecosystems and Fisheries (regional)'), ('Biodiversity', 'Biodiversity'), ('Health', 'Health'), ('Coastal Infrastructure', 'Coastal Infrastructure'), ('Permafrost', 'Permafrost'), ('Computable General Equilibrium Modelling', 'Computable General Equilibrium Modelling'), ('Agro-Economic Modelling', 'Agro-Economic Modelling')], max_length=500),
        ),
        migrations.AlterField(
            model_name='outputdata',
            name='sector',
            field=models.CharField(choices=[('Agriculture', 'Agriculture'), ('Energy', 'Energy'), ('Water (global)', 'Water (global)'), ('Water (regional)', 'Water (regional)'), ('Biomes', 'Biomes'), ('Forests', 'Forests'), ('Marine Ecosystems and Fisheries (global)', 'Marine Ecosystems and Fisheries (global)'), ('Marine Ecosystems and Fisheries (regional)', 'Marine Ecosystems and Fisheries (regional)'), ('Biodiversity', 'Biodiversity'), ('Health', 'Health'), ('Coastal Infrastructure', 'Coastal Infrastructure'), ('Permafrost', 'Permafrost'), ('Computable General Equilibrium Modelling', 'Computable General Equilibrium Modelling'), ('Agro-Economic Modelling', 'Agro-Economic Modelling')], max_length=500),
        ),
        migrations.AddField(
            model_name='inputdata',
            name='download_instructions',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RenameField(
            model_name='impactmodel',
            old_name='resolution',
            new_name='spatial_resolution',
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='sector',
            field=models.CharField(choices=[('Agriculture', 'Agriculture'), ('Agro-Economic Modelling', 'Agro-Economic Modelling'), ('Biodiversity', 'Biodiversity'), ('Biomes', 'Biomes'), ('Coastal Infrastructure', 'Coastal Infrastructure'), ('Computable General Equilibrium Modelling', 'Computable General Equilibrium Modelling'), ('Energy', 'Energy'), ('Forests', 'Forests'), ('Health', 'Health'), ('Marine Ecosystems and Fisheries (global)', 'Marine Ecosystems and Fisheries (global)'), ('Marine Ecosystems and Fisheries (regional)', 'Marine Ecosystems and Fisheries (regional)'), ('Permafrost', 'Permafrost'), ('Water (global)', 'Water (global)'), ('Water (regional)', 'Water (regional)')], max_length=500),
        ),
        migrations.AlterField(
            model_name='impactmodel',
            name='spin_up',
            field=models.NullBooleanField(choices=[(None, '---------'), (True, 'Yes'), (False, 'No')], help_text="'No' indicates the simulations were run starting in the first reporting year 1971", verbose_name='Did you spin-up your model?'),
        ),
        migrations.AlterField(
            model_name='outputdata',
            name='sector',
            field=models.CharField(choices=[('Agriculture', 'Agriculture'), ('Agro-Economic Modelling', 'Agro-Economic Modelling'), ('Biodiversity', 'Biodiversity'), ('Biomes', 'Biomes'), ('Coastal Infrastructure', 'Coastal Infrastructure'), ('Computable General Equilibrium Modelling', 'Computable General Equilibrium Modelling'), ('Energy', 'Energy'), ('Forests', 'Forests'), ('Health', 'Health'), ('Marine Ecosystems and Fisheries (global)', 'Marine Ecosystems and Fisheries (global)'), ('Marine Ecosystems and Fisheries (regional)', 'Marine Ecosystems and Fisheries (regional)'), ('Permafrost', 'Permafrost'), ('Water (global)', 'Water (global)'), ('Water (regional)', 'Water (regional)')], max_length=500),
        ),
    ]
