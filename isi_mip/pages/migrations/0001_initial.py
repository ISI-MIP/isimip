# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-14 07:57
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import isi_mip.contrib.blocks
import isi_mip.pages.blocks
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.blocks
import wagtail.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0023_alter_page_revision_on_delete_behaviour'),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.fields.StreamField((('columns_1_to_1', wagtail.blocks.StructBlock((('left_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))))), ('right_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))), form_classname='pull-right'))))), ('columns_1_to_2', wagtail.blocks.StructBlock((('left_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))))), ('right_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))), form_classname='pull-right'))))), ('columns_2_to_1', wagtail.blocks.StructBlock((('left_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))))), ('right_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))), form_classname='pull-right'))))), ('image', isi_mip.pages.blocks.ImageBlock()), ('pdf', wagtail.blocks.StructBlock((('file', wagtail.documents.blocks.DocumentChooserBlock()), ('description', wagtail.blocks.CharBlock())))), ('paper', wagtail.blocks.StructBlock((('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('author', wagtail.blocks.CharBlock()), ('title', wagtail.blocks.CharBlock()), ('journal', wagtail.blocks.CharBlock()), ('link', wagtail.blocks.URLBlock())), template='widgets/page-teaser-wide.html')), ('bigteaser', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('subtitle', wagtail.blocks.CharBlock(required=False)), ('picture', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.blocks.RichTextBlock()), ('external_link', wagtail.blocks.URLBlock(help_text='Will be ignored if an internal link is provided', required=False)), ('internal_link', wagtail.blocks.PageChooserBlock(help_text='If set, this has precedence over the external link.', required=False)), ('from_date', wagtail.blocks.DateBlock(required=False)), ('to_date', wagtail.blocks.DateBlock(required=False)))))))),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('blogindexpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.BlogIndexPage')),
            ],
            options={
                'abstract': False,
            },
            bases=('blog.blogindexpage',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('blogpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.BlogPage')),
            ],
            options={
                'abstract': False,
            },
            bases=('blog.blogpage',),
        ),
        migrations.CreateModel(
            name='DashboardPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FAQPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.fields.StreamField((('columns_1_to_1', wagtail.blocks.StructBlock((('left_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))))), ('right_column', wagtail.blocks.StreamBlock((('rich_text', wagtail.blocks.RichTextBlock()), ('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))), form_classname='pull-right'))))), ('faqs', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock()), ('faqs', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock((('question', wagtail.blocks.CharBlock()), ('answer', wagtail.blocks.RichTextBlock()))))))))))),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to this address', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('confirmation_text', models.TextField(default='Your registration was submitted')),
                ('top_content', wagtail.fields.StreamField((('richtext', wagtail.blocks.RichTextBlock()),))),
                ('bottom_content', wagtail.fields.StreamField((('richtext', wagtail.blocks.RichTextBlock()),))),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GettingStartedPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.fields.StreamField((('input_data', wagtail.blocks.StructBlock((('description', wagtail.blocks.RichTextBlock()),))), ('contact', wagtail.blocks.StructBlock((('description', wagtail.blocks.RichTextBlock()), ('sectors', wagtail.blocks.ListBlock(isi_mip.pages.blocks.SectorBlock)))))))),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('teaser_title', models.CharField(max_length=500)),
                ('teaser_text', wagtail.fields.RichTextField()),
                ('teaser_link_external', models.URLField(blank=True, help_text='Will be ignored if an internal link is provided', verbose_name='External link')),
                ('content', wagtail.fields.StreamField((('row', wagtail.blocks.StreamBlock((('teaser', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.blocks.TextBlock(required=True)), ('link', wagtail.blocks.PageChooserBlock(required=True))))), ('bigteaser', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('subtitle', wagtail.blocks.CharBlock(required=False)), ('picture', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.blocks.RichTextBlock()), ('external_link', wagtail.blocks.URLBlock(help_text='Will be ignored if an internal link is provided', required=False)), ('internal_link', wagtail.blocks.PageChooserBlock(help_text='If set, this has precedence over the external link.', required=False)), ('from_date', wagtail.blocks.DateBlock(required=False)), ('to_date', wagtail.blocks.DateBlock(required=False))))), ('news', wagtail.blocks.StructBlock((('blog_index', isi_mip.contrib.blocks.SpecificPageChooserBlock(help_text='Select blog index page.', required=False)), ('title', wagtail.blocks.CharBlock(help_text='Per default, the title of the blog index will be used.', required=False)), ('entry_count', isi_mip.contrib.blocks.IntegerBlock(help_text='How many blog entries should be displayed?', max_value=5, min_value=1, required=True))))), ('numbers', wagtail.blocks.StructBlock((('number1', wagtail.blocks.CharBlock()), ('number2', wagtail.blocks.CharBlock())))), ('twitter', wagtail.blocks.StructBlock((('username', wagtail.blocks.CharBlock(help_text='You will find username and widget_id @ https://twitter.com/settings/widgets/', required=True)), ('widget_id', wagtail.blocks.CharBlock(required=True)), ('tweet_limit', wagtail.blocks.CharBlock(max_length=2, required=True)))))))),))),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ImpactModelsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.fields.StreamField((('impact_models', wagtail.blocks.StructBlock((('description', wagtail.blocks.RichTextBlock()), ('rows_per_page', isi_mip.contrib.blocks.IntegerBlock(default=20, min_value=1, required=True))))), ('news', wagtail.blocks.StructBlock((('blog_index', isi_mip.contrib.blocks.SpecificPageChooserBlock(help_text='Select blog index page.', required=False)), ('title', wagtail.blocks.CharBlock(help_text='Per default, the title of the blog index will be used.', required=False)), ('entry_count', isi_mip.contrib.blocks.IntegerBlock(help_text='How many blog entries should be displayed?', max_value=5, min_value=1, required=True))), template='blocks/flat_blog_block.html'))))),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='LinkListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('links', wagtail.fields.StreamField((('link', wagtail.blocks.StructBlock((('title', wagtail.blocks.CharBlock(required=True)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(required=False)), ('link', wagtail.blocks.URLBlock(required=False))))),))),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NewsletterPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='OutcomesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('papers', wagtail.fields.StreamField((('paper', wagtail.blocks.StructBlock((('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('author', wagtail.blocks.CharBlock()), ('title', wagtail.blocks.CharBlock()), ('journal', wagtail.blocks.CharBlock()), ('link', wagtail.blocks.URLBlock())))),))),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='OutputDataPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.fields.StreamField((('output_data', wagtail.blocks.StructBlock((('description', wagtail.blocks.RichTextBlock()),))),))),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='RegisterFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.CharField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', max_length=512, verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='pages.FormPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='homepage',
            name='teaser_link_internal',
            field=models.ForeignKey(blank=True, help_text='If set, this has precedence over the external link.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='Or internal link'),
        ),
    ]
