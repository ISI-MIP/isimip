# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-14 12:22
from __future__ import unicode_literals

from django.db import migrations
from django.utils.text import slugify
from modelcluster.contrib.taggit import ClusterTaggableManager

from wagtail.models import Page
from wagtail.images.models import Image

from isi_mip.pages.models import PaperPageTag, PaperPage
from isi_mip.climatemodels.models import SimulationRound


def revert_nothing(apps, schema_editor):
    pass

def create_paper_pages(apps, schema_editor):
    outcome_page = Page.objects.get(title='Publications').specific
    paper_overview_page = Page.objects.get(title='Publications Overview Page')

    tag = None
    for block in outcome_page.content.stream_data:
        if block['type'] == 'heading':
            if 'isimip2b' in block['value'].lower():
                tag = SimulationRound.objects.get(name__iexact='ISIMIP2b')
            elif 'isimip2a' in block['value'].lower():
                tag = SimulationRound.objects.get(name__iexact='ISIMIP2a')
            elif 'fast track' in block['value'].lower():
                tag = SimulationRound.objects.get(name__iexact='Fast Track')
        elif block['type'] == 'papers':
            for paper in block['value']['papers']:
                image = None
                if paper['picture']:
                    image = Image.objects.get(pk=paper['picture'])
                if not PaperPage.objects.filter(title=paper['title']).exists():
                    paper_page = PaperPage(
                        title=paper['title'],
                        slug=slugify(paper['title']),
                        author=paper['author'],
                        journal=paper['journal'],
                        link=paper['link'],
                        picture=image,
                    )
                    paper_overview_page.add_child(instance=paper_page)
                    paper_page.simulation_rounds.add(tag)
                    paper_page.save()
                else:
                    paper_pages = PaperPage.objects.filter(title=paper['title'])
                    paper_pages.update(
                        title=paper['title'],
                        slug=slugify(paper['title']),
                        author=paper['author'],
                        journal=paper['journal'],
                        link=paper['link'],
                        picture=image,
                    )
                    for paper_page in paper_pages:
                        paper_page.simulation_rounds.add(tag)
                    paper_page.save()


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0031_auto_20181122_1259'),
    ]

    operations = [
        migrations.RunPython(create_paper_pages, revert_nothing),
    ]

